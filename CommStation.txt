/*
 * GRATUITOUS SETS LABORATORIES
 * Dallas, TX, USA
 * 
 * ESCAPE ROOM, PALM SPRINGS
 * Palm Springs, CA, USA
 * 
 * 2022
 */

//============== DEFINITIONS & DECLAIRATIONS =================//

//-------------- LIBRARIES -----------------------------------//
/* Call all function libraries required by the sketch. 
 */
  #include <Adafruit_NeoPixel.h>  // WS2812 (NeoPixel) addressable LEDs
  
//-------------- SETTINGS & GLOBAL CONSTANTS -----------------//
/* Define constraits used by various functions.
 * Variables using '#define' are defined by hardware, and should be left alone.
 * Variables using 'const' can be changed to tune the puzzle.
 */
  const String myNameIs = "CommStation";                	 // name of sketch
  const String verNum = "1.0";                               // version of sketch
  const String lastUpdate = "2022 Oct";                      // last update

  const int stationNum = 4;                                   // 2 = Life Sup', 3 = Electrical, 4 = Comm, 8 = Cargo    
  
  const int serialDelay = 500;                                // length of time before sending a blank line via Serial
  const int debounceDelay = 50;                               // delay after a "somethingNew" to avoid bouncing comm to R.Pi

//-------------- PIN DEFINITIONS  ----------------------------//
/* Most of the I/O pins on the Arduino Nano are hard-wired to various components on the ARDNEX2.
 * Pins not used for their standard fuction have header pins for alternate uses.
 */

  const int npxCmdPin[2] = {8,9};
  #define neoPixelPin 5           // data line to WS2812 (NeoPixel) via 470R resistor

  const int jackPin[4] = {A0,A1,A2,A3};
  
  #define loadPin     2           // parallel connection to all 74HC165 PISO shift registers, pin 1
  #define dataInPin   3           // serial connection to nearest 74HC165 PISO shift register, pin 9
  #define clockPin    7           // parallel connection to all shift registers (74HC165 pin 2 / 74HC595 pin 11)

//============== HARDWARE PARAMETERS =========================//
/*
 * Control basic paramaters for external devices from here.
 * Pin definitions should be kept above, to insure that there is no overlap.
 * As with settings & global constants: 
 * #define refers to installed hardare
 * const refers to soft settings
 */
//.............. WS2812B NeoPixels ...........................//
  #define numLEDs 24                                          // number of pixels in the daisy chain
  const int npxBright = 255;                                  // relative brighness of NeoPixels (0-255)
  Adafruit_NeoPixel npxLED = Adafruit_NeoPixel(               // neoPixel object name
    numLEDs, neoPixelPin, NEO_GRB + NEO_KHZ800);              // # of pixels, signal pin, type

//============== GLOBAL VARIABLES ============================//
/* Decrlare variables used by various functions.
 */
  byte npxCmd;                                                // 0-3 incoming from R.Pi
  byte npxPrev;                                               // previous loop's command from R.Pi

  int puzzleID;                                               // the ID number of the selected puzzle

  long PISOregRead;
  long PISOregPrev;
  long PISOregAns;

  byte cableNum[4];                                           // the cable/hose hooked up via analaog read
  byte cablePrev[4];                                          // previous loop's cable numbers
  byte cableAns[4];                                           //
  
  bool somethingNew;                                          // flag to indicate that some input has changed since the last loop
  bool solved;

  //
  byte PISOdata[3];
  byte PISOprev[3];

//============================================================//
//============== SETUP =======================================//
//============================================================//

void setup() {

//-------------- SERIAL MONITOR ------------------------------//
/*
 * ERPS note:
 * This is my standard initial report,
 * so that future me/us knows what sketch was loaded.
 * This can/will cange for ATAU
 */
  Serial.begin(9600);                                        //
/*
  Serial.println();
  Serial.println("Setup initialized.");
  Serial.print(myNameIs);                                     // report the sketch name and last update
  Serial.print(" ver ");
  Serial.println(verNum);
  Serial.print("Last updated on ");
  Serial.println(lastUpdate);
*/
//-------------- PINMODES ------------------------------------//

//.............. NeoPixel Sign Command .......................//
  for (int cmd = 0; cmd < 2; cmd++){
    pinMode (npxCmdPin, INPUT);
  }
//.............. Analog Cables ...............................//
  for (int cab = 0; cab < 4; cab++){
    pinMode (jackPin[cab], INPUT);
  }
//.............. Shift Registers .............................//
  pinMode (clockPin, OUTPUT);
  pinMode (loadPin, OUTPUT);
  pinMode (dataInPin, INPUT);

//-------------- HARDWARE SETUP ------------------------------//

//.............. NeoPixels ...................................//
  npxLED.begin();
  npxLED.setBrightness(npxBright);
  npxLED.show();

//............................................................//
  randomSeed(analogRead(A7));
  readNeoPixelCommand();
  readAnalogCables();
  readShiftRegisters(25);
  cycleReset();
  genPuzzIDAnswer(stationNum);

//-------------- A/V FEEDBACK --------------------------------//

  Serial.println("READY");
  delay(serialDelay);
  Serial.println(puzzleID);
  delay(serialDelay);
  Serial.println();
}

//============================================================//
//============== LOOP ========================================//
//============================================================//

void loop() {

  readNeoPixelCommand();
/* Comment out one or both of the below functions as needed by each station. */
//  readAnalogCables();                                         // used for Life Support & Electrical
  readShiftRegisters(25);                                     // 25 for Comm, 16 for Cargo

  updateSignColor();

  if  (somethingNew){
    checkProgress(stationNum);
  
    if (solved){
      Serial.println("Win.");
      while(solved){
                                                              // infinite loop
      }

//      genPuzzIDAnswer(stationNum);
    }
  }

//============== ROUTINE MAINTAINENCE ========================//

//  dbts();
  cycleReset();
}

//============================================================//
//============== GENERATE PUZZLE ID & ANSWER =================//
//============================================================//

void genPuzzIDAnswer(int game){

  puzzleID = random(1,10);                                    // pick a number between 1 & 9
  
  switch (game){
//------------------------------------------------------------//
    case 2:                                                   // Life Support
      int LifeAnsGrid[36] = {                                 // 1 = CO2, 2 = Air, 3 = Tank, 4 = Regulator
        /*1*/ 1,2,3,4,
        /*2*/ 2,1,3,4,
        /*3*/ 3,1,4,2,
        /*4*/ 3,2,4,1,
        /*5*/ 3,4,2,1,
        /*6*/ 4,1,2,3,
        /*7*/ 4,2,1,3,
        /*8*/ 1,4,2,3,
        /*9*/ 2,3,1,4
      };
      for (int j = 0; j < 4; j++){                            // for each jack in the life support game...
        cableAns[j] = LifeAnsGrid[(((puzzleID-1)*4)+j)];      // slot in the approriate value from the answerGrid
      }
      break;
//------------------------------------------------------------//
    case 3:                                                   // Electrical
      byte ElecAnsGrid[36] = {                                // 1 = Main, 2 = Aux, 3 = Reactor, 4 = Cooling
        /*1*/1,2,3,4,
        /*2*/1,4,2,3,
        /*3*/2,3,4,1,
        /*4*/2,4,1,3,
        /*5*/3,1,2,4,
        /*6*/3,4,1,2,
        /*7*/4,2,3,1,
        /*8*/4,3,2,1,
        /*9*/4,1,2,3
      };
      for (int j = 0; j < 4; j++){                            // for each jack in the electrical game...
        cableAns[j] = ElecAnsGrid[(((puzzleID-1)*4)+j)];      // slot in the approriate value from the answerGrid
      }
      break;
//------------------------------------------------------------//
    case 4:                                                   // Communiucations
/*
 * Wiring Hookup to the shift registers...
 * For the Columns:
 * Column A is on the red marked ribbon cable, brown-green.
 * Column B is on the red marked ribbon cable, black-blue.
 * Column C is on the black marked ribbon cable, brown-green.
 * Column D is on the black marked ribbon cable, black-blue.
 * Column E is on the yellow marked half-ribbon cable, brown-green.
 * For the number rows:
 * 1 is brown or black
 * 2 is red or white
 * 3 is orange or gray
 * 4 is yellow or purple
 * 5 is green or blue
 */
      long answerList[9] = {
             //AAAAABBBBBCCCCCDDDDDEEEEE
             //1234512345123451234512345
        /*1*/0b1111110100111010100011111,
        /*2*/0b1110110110111111010101100,
        /*3*/0b1110101111110100101011011,
        /*4*/0b1101110011111010011011101,
        /*5*/0b1101110111101011110001111,
        /*6*/0b1011001011011111111010011,
        /*7*/0b1101111011010010001111111,
        /*8*/0b0111101011101001101110111,
        /*9*/0b1111001110110010111010111
             //1234512345123451234512345
             //AAAAABBBBBCCCCCDDDDDEEEEE
        };
      PISOregAns = answerList[puzzleID];
      break;
//------------------------------------------------------------//
    case 8:                                                   // Cargo
      byte CargoAnsGrid[36] = {                               // 1 = Grav Lens, 2 = Flux Cap, 3 = Misc Tard, 4 = Anti-Mat
           //H I R B                                             Heat, Inert, Refrig, Bulk
        /*1*/1,2,3,4,
        /*2*/1,4,2,3,
        /*3*/3,1,2,4,
        /*4*/4,1,3,2,
        /*5*/4,2,1,3,
        /*6*/4,3,1,2,
        /*7*/2,4,3,1,
        /*8*/4,3,2,1,
        /*9*/3,2,4,1
      };
      for (int j = 0; j < 4; j++){                            // for each jack in the electrical game...
        cableAns[j] = CargoAnsGrid[((puzzleID-1*4)+j)];       // slot in the approriate value from the answerGrid
      }
      break;
  }
//------------------------------------------------------------//
//  Serial.print("PuzzleID #");
//  Serial.print(puzzleID);
//  delay(serialDelay);
//  Serial.println();
//  analogAnsReport();                                          // !! for DBTS only !! comment out of final
}

void analogAnsReport(){
  Serial.println("Correct Answer as follows:");
  for (int c = 0; c < 4; c++){
    Serial.print(cableAns[c]);
    if (c < 3){
      Serial.print(" - ");
    }
  }
  Serial.println();
}

//============================================================//
//============== INPUT FUNCTIONS =============================//
//============================================================//

//-------------- Read NPX Command ----------------------------//

void readNeoPixelCommand(){
  
  npxCmd = 0;                                                 // assume no command
  
  for (int pos = 0; pos < 2; pos++){                          // for each bit in the command data...
    bool bitVal = digitalRead(npxCmdPin[pos]);                // read the approriate pin
    bitWrite(npxCmd, pos, bitVal);                            // and write that bitVal to the position
  }
  
  if (npxCmd != npxPrev){                                     // if this is different from the last loop
    somethingNew = true;                                      // raise the somethingNew flag
  }
}
//-------------- Analog Inputs -------------------------------//

void readAnalogCables(){
/*
 * RESISTOR VALUES
 * 1  3K3
 * 2  1K5
 * 3  680R
 * 4  220R
 */
  int target[5] = {0,237,409,609,838};                        // calculated analog read values for each key's chosen resistor
  int range = 10;                                             // the margin of error (+/-) to allow a key to read

  for (int j = 0; j < 4; j++){                                // for each of the 4 jacks/ports...
    int rawRead = analogRead(jackPin[j]);                     // get an analog read
    
    cableNum[j] = 0;                                          // assume there is no cable
    for (int c = 1; c <= 4; c++) {                            // for each of 4 possible cables...
      if (rawRead >= target[c]-range                          // if the read is at or above the low end...
      && rawRead <= target[c]+range) {                        // and it is at or below the high end...
        cableNum[j] = c;                                      // that is the jack's cable number
      }
    }
    if (cableNum[j] != cablePrev[j]){                         // if that jack's cable has changed...
      somethingNew = true;                                    // raise the somethingNew flag
    }
  }
}
//-------------- Register Inputs -----------------------------//

void readShiftRegisters(int bitNum){

  pulsePin(loadPin);
  for (int bitPos = 0; bitPos < bitNum; bitPos++){
    bool bitVal = digitalRead(dataInPin);
    if(stationNum == 4 && bitPos == 14){
      pulsePin(clockPin);
    }
    bitWrite(PISOregRead,bitPos,bitVal);
    pulsePin(clockPin);
  }
  if (PISOregRead != PISOregPrev){
    somethingNew = true;
  }
}

//============================================================//
//============== MAIN GAME FUNCTIONS =========================//
//============================================================//

void checkProgress(int game){

  solved = true;                                              // assume the the player is correct
  String noun;
  
  switch(game){                                               // BEGIN SWITCH CASE

//------------------------------------------------------------//
    case 2:                                                   // Life Support or
      noun = "Tube ";
    case 3:                                                   // Electrical
      noun = "Wire ";
      for (int j = 0; j < 4; j++){                            // for each of the 4 jacks...
        if (cableNum[j] > cablePrev[j]){                      // if it's got a higher value than it used to...
          Serial.print(noun);
          Serial.println("Connect.");                         // inform R.Pi of a connect
          delay(serialDelay);                                 // this delay is set in the global constants
          Serial.println();                                   // print a blank line to clear the Serial
        }
        else if (cableNum[j] < cablePrev[j]){                 // otherwise, if the jack has a lower value...
          Serial.print(noun);
          Serial.println("Disconnect.");                      // inform R.Pi of a disconnect
          delay(serialDelay);
          Serial.println();
        }
      }
      for (int j = 0; j < 4; j++){                            // for each of the 4 jacks...
        if (cableNum[j] != cableAns[j]){                      // if it's cable doesn't match the answer...
          solved = false;                                     // you're WRONG!
        }
      }
      break;                                                  // EXIT SWITCH CASE
//------------------------------------------------------------//
    case 4:                                                   // Communications
      noun = "Wire ";
      if (PISOregRead < PISOregPrev){                         // if the new long is less than the old (active LOWs)... 
        Serial.print(noun);
        Serial.println("Connect.");                           // inform R.Pi of a disconnect
        delay(serialDelay);
        Serial.println();
      }
      else if (PISOregRead > PISOregPrev){                    // otherwise, if it's higher...
        Serial.print(noun);
        Serial.println("Disconnect.");                        // inform R.Pi of a disconnect
        delay(serialDelay);
        Serial.println();
      }
      if (PISOregRead != PISOregAns){
        solved = false;
      }
      break;
//------------------------------------------------------------//
    case 8:                                                   // Cargo
      uint16_t cargoStream = PISOregRead % 32768;             // make a 16bit copy of the PISOregRead
      byte magsInBay[4];                                      // the magnetic reads from each bay
      for (int b = 0; b < 4; b++){
        magsInBay[b] = cargoStream % 16;
        cargoStream = cargoStream >> 4;
      }
      for (int b = 0; b < 4; b++){
        cableNum[b] = 0;
        if      (magsInBay[b] == 0b1010) cableNum[b] = 1;
        else if (magsInBay[b] == 0b1001) cableNum[b] = 2;
        else if (magsInBay[b] == 0b0110) cableNum[b] = 3;
        else if (magsInBay[b] == 0b0101) cableNum[b] = 4;
      }
      String bayName[4] = {"Heat","Inert","Refrig","Bulk"};
      for (int b = 0; b < 4; b++){
        if (cableNum[b] > cablePrev[b]){
          Serial.print(bayName[b]);
          Serial.print(" On.");
          delay (serialDelay);
          Serial.println();
        }
        else if (cableNum[b] < cablePrev[b]){
          Serial.print(bayName[b]);
          Serial.print(" Off.");
          delay (serialDelay);
          Serial.println();
        }
        if (cableNum[b] != cableAns[b]){
          solved = false;
        }
      }
      break;
//------------------------------------------------------------//
  }                                                           // END of SWITCH CASE
}

//============================================================//
//============== STATION SIGN UPDATE =========================//
//============================================================//

//-------------- Update Station Sign -------------------------//

void updateSignColor(){
  
  uint32_t signColor [4] = {0,0xFF0000,0x00FF00,0x8888BB};    // hexidecimal sign color for each npxCmd ?0xGGRRBB?

  for ( int pxl = 0; pxl < numLEDs; pxl++){                   // for each pixel in the sign...
    npxLED.setPixelColor(pxl,signColor[npxCmd]);              // set it to the npxCmd color
  }
  npxLED.show();                                              // illuminate the sign
}
  
//============================================================//
//============== SHIFT REGISTER I/O ==========================//
//============================================================//

/* These functions will read and write via PISO & SIOP shift registers.
 * They require the global variable byte arrays of:
 * byte PISOdata[numPISOregs];
 * 
 * Devices use 74HC165 PISO registers and 74HC595 SIPO registers.
 * 
 * This section updated  Aug 2022
 */

//-------------- RISING EDGE PUSLE ---------------------------//

/* This function will send a rising edge signal to the designated output pin.
 * Paramaters required are:
 * pinName (loadPin, latchPin, clockPin)
 */

void pulsePin(int pinName){
  int pulseTime = 10;
  digitalWrite(pinName, LOW);
  delayMicroseconds(pulseTime);
  digitalWrite(pinName, HIGH);
  delayMicroseconds(pulseTime);
}

//============================================================//
//============== DEBUG & TROUBLESHOOT ========================//
//============================================================//
/*
 * This function's call in the vod loop is commented out.
 */
void dbts(){
  
  if (somethingNew){
//    analogReport();
//    gridReport();
    portList();
  }
}

void analogReport(){
  for (int j = 0; j < 4; j++){
    Serial.print(cableNum[j]);
    if (j < 3){
      Serial.print(" - ");  
    }
  }
  Serial.println();
}

void gridReport(){
  Serial.println("GRD\tA\tB\tC\tD\tE");
  for (int j = 24; j > 19; j--){
    Serial.print("\t");
    bool bitVal = bitRead(PISOregRead,j);
    Serial.print(bitVal);
  }
  Serial.println();
  for (int j = 19; j > 14; j--){
    Serial.print("\t");
    bool bitVal = bitRead(PISOregRead,j);
    Serial.print(bitVal);
  }
  Serial.println();
  for (int j = 14; j > 9; j--){
    Serial.print("\t");
    bool bitVal = bitRead(PISOregRead,j);
    Serial.print(bitVal);
  }
  Serial.println();
  for (int j = 9; j > 4; j--){
    Serial.print("\t");
    bool bitVal = bitRead(PISOregRead,j);
    Serial.print(bitVal);
  }
  Serial.println();
  for (int j = 4; j >= 0; j--){
    Serial.print("\t");
    bool bitVal = bitRead(PISOregRead,j);
    Serial.print(bitVal);
  }
  Serial.println();
}
void regCheck(){
      for (int r = 0; r < 4; r++){
      Serial.print("Reg# ");
      Serial.print(r);
      Serial.print(" ");
      Serial.println(PISOdata[r],BIN);
    }
    Serial.println();
}

void portList(){
  Serial.println("A-A-AB-B-BC-C-CD-D-DE-E-E");
  Serial.println("1234512345123451234512345");
  for (int b = 24; b >= 0; b--){
    bool bitVal = bitRead(PISOregRead,b);
    Serial.print(bitVal);
  }
  Serial.println();
  Serial.println();
}

//============================================================//
//============== CYCLE RESET =================================//
//============================================================//
void cycleReset(){

  npxPrev = npxCmd;
  for (int j = 0; j < 4; j++) cablePrev[j] = cableNum [j];
  PISOregPrev = PISOregRead;

  for (int reg = 0; reg < 3; reg++){
    PISOprev[reg] = PISOdata[reg];
  }

  if (somethingNew){
    delay(debounceDelay);
  }
  
  somethingNew = false;
}